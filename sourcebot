#!/usr/bin/env python
# -*- encoding: utf-8 -*-

"""
The MIT License (MIT)

Copyright (c) <2015> <Jared Patrick>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

"""Sourcebot -- python project automated bootstrap utility

.. moduleauthor: Jared Patrick <jared.patrick@gmail.com>
"""

import os
import re
import sys
import json

from datetime import datetime


SETUP = """\
from setuptools import setup

setup(
    name='{name}',
    description='{description}',
    version='{version}',
    author='{author}',
    author_email='{author_email}',
    url='{url}',
    packages=['{name}', 'tests'],
    scripts=[]
)
"""

MAKEFILE = """\
NAME={name}
DIST=build dist sdist bdist $(NAME).egg-info

all: install clean

.PHONY: install
install:
\tpython setup.py install

.PHONY: tests
tests:
\ttox
\tmake clean

.PHONY: clean
clean:
\t@rm -rf $(DIST)
\t@find * -name "*.pyc" -print | xargs rm -rf
"""

TRAVIS_YML = """\
language: python
python:
\t{vers}
install:
\t- pip install -r requirements/test.txt
script: make tests
"""

TOX_INI = """\
# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist = {vers}

[testenv]
commands =
\tnosetests --rednose --nocapture
\tpep8 {name}
\tpep8 tests
deps =
\tnose
\trednose
\tmock
\tpep8
"""

LICENSES = {
    'MIT': """\
The MIT License (MIT)

Copyright (c) <{year}> <{author}>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
""",
    'GPL3': """\
{desc}
Copyright (C) <{year}>  <{author}>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
}



def main():
    args = sys.argv

    try:
        proj = args[1]
    except IndexError:
        print 'usage: sourcebot PROJECT_NAME APP_NAME'
        return 1

    # configure a new system for sourcebot
    if proj == '~init':
        try:
            envs = args[2]
        except IndexError:
            print 'no environment path was provided'

        user = os.getenv('SUDO_USER')
        conf = '/home/{}/.sourcebotrc'.format(user)

        if os.path.exists(conf):
            print 'sourcebot has already been intialized'
            return 0

        # create sourebot symlink
        os.system('ln -s {}/sourcebot /usr/bin/sourcebot'.format(os.getcwd()))

        # create .sourcebotrc file
        with open(conf, 'w') as rc:
            rc.write('ENVS={}\n'.format(envs))

        os.chdir(envs)

        # create env dir projects .builds directory
        if not os.path.exists('.builds'):
            os.system('mkdir .builds')

        return 0

    # createt a new app in the current working directory
    if proj == '~app':
        try:
            app_name = args[2]
        except IndexError:
            print 'no app name was provided'
            return 1

        # create and change to new app dir
        os.system('mkdir {}'.format(app_name))
        os.chdir(app_name)

        # create app dirs and files
        os.system('mkdir lib')
        os.system('touch __init__.py main.py lib/__init__.py app.yml')
        return 0

    # get the .sourcebotrc ENVS path
    try:
        user = os.getenv('USER')
        conf = open('/home/{}/.sourcebotrc'.format(user), 'r')
        envs = re.search(r'(?m)^ENVS=(.*)\n', conf.read()).group(1)
        path = os.path.join(envs, '.builds', proj)
        conf.close()
    except IOError:
        print 'no .sourcebotrc found in user home directory'
        return 1

    # check if project path exists
    if os.path.exists(path):
        os.chdir(path)
    else:
        print 'could not find project build path: {}'.format(proj)
        return 1

    # check for build.json in current working directory
    try:
        bjson = open('build.json', 'r')
        build = json.loads(bjson.read())
        bjson.close()
    except IOError:
        print 'No build.json found'
        sys.exit(1)
    except ValueError as e:
        print 'build.json error - %s' % e.message
        sys.exit(1)

    name = build['name']
    envs = build['envs']
    base = os.path.join(envs, name)

    # create virtual environment and cd to venv base
    os.system('cd %s && virtualenv --no-site-packages %s' % (envs, name))

    # change to venv base directory
    os.system('mkdir -p %s' % os.path.join(base, name))
    os.chdir(os.path.join(base, name))

    # add README.md and LICENSE.md
    os.system('touch README.md LICENSE.md')

    # make python directories
    os.system('mkdir -p %s' % os.path.join(name))
    os.system('mkdir -p %s' % os.path.join('tests', 'unit'))
    os.system('mkdir -p %s' % os.path.join('tests', 'integration'))
    os.system('mkdir -p %s' % os.path.join('tests', 'fixtures'))

    # make __init__.py files
    for root, dirs, files in os.walk(os.path.join(os.getcwd())):
        if root != os.getcwd():
            os.system('touch %s/__init__.py' % root)

    # make requirements
    os.system('mkdir -p %s' % os.path.join('requirements'))

    for rname, packages in build['requirements'].iteritems():
        path = os.path.join('requirements', '%s.txt' % rname)

        with open(path, 'w') as reqf:
            if rname != 'base':
                # append base requirements to targetted requirements
                packages = ['-r base.txt'] + packages

            reqf.write('\n'.join([package for package in packages]))

    # build setup
    with open('setup.py', 'w') as setupf:
        setupf.write(SETUP.format(**build))

    # build Makefile
    with open('Makefile', 'w') as makef:
        makef.write(MAKEFILE.format(name=name))

    # build .traivs.yml
    with open('.travis.yml', 'w') as travisf:
        vers = ['- %s' % ver for ver in build['compatibility']]
        travisf.write(TRAVIS_YML.format(vers='\n\t'.join(vers)))

    # build tox.ini
    with open('tox.ini', 'w') as toxf:
        vers = ', '.join(build['compatibility'])
        toxf.write(TOX_INI.format(name=name, vers=vers))

    # build LICENSE.md
    if build.get('license', '') != '':
        license = LICENSES.get(build['license'].upper(), None)

        if license is not None:
            with open('LICENSE.md', 'w') as licensef:
                licensef.write(license.format(desc=build['description'],
                                              year=datetime.now().year,
                                              author=build['author']))

    # setup git repo
    if build.get('vcs', '').lower() == 'git':
        os.system('git init')
        os.system('git config user.name "{}"'.format(build['author']))
        os.system('git config user.email {}'.format(build['author_email']))
        os.system('git add .')
        os.system('git commit -m "initial commit"')

    return 0


if __name__ == '__main__':
    sys.exit(main())
